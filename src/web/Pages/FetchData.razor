@page "/report"
@using web.Data.Adapters;
@inject IJSRuntime _jsRuntime;
@using System.Timers
@implements IDisposable
@inject IStringLocalizer<App> _localizer
@using web.Data.ModelDtos

<div class="alert alert-primary" role="alert" @onclick="Collaps">
    <p class="text-right" style="color:blue;">
        @_localizer["Costs"]: @sumCost
        <i class="fa fa-bar-chart text-left p-2" style="font-size:36px; text-align:left;"></i>
    </p>
</div>
<div>
    <div class="@(Collapsed? "collapse": "" )">

        <EditForm Model="@model" OnValidSubmit="HandleValidSubmit" class="body  p-3 mb-5 rounded ">
            <DataAnnotationsValidator />
            <div>
                <div class="row d-flex">
                    <div class="col-lg-12 form-group">
                        <label for="additional">@_localizer["Start Date"]:</label>
                        <input type="date" class="form-control" @bind-value="model.StartDate" />
                    </div>
                </div>
                <div class="row d-flex">
                    <div class="col-lg-12 form-group">
                        <label for="additional">@_localizer["End Date"]:</label>
                        <input type="date" class="form-control" @bind-value="model.EndDate" />
                    </div>
                </div>
                <div class="row d-flex">
                    <div class="col-lg-12 form-group">
                        <label for="additional">@_localizer["Choose an option"]:</label>
                        <InputSelect @bind-Value="model.Filter" class="form-control">
                            @foreach (var item in Enum.GetValues(typeof(Filter)))
                            {
                                <option value="@item">@item</option>
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="ml-lg-3 m-3">
                    <button type="submit" class="btn btn-primary">&nbsp;@_localizer["Search"]&nbsp;</button>
                    <NavLink class="btn btn-outline-secondary" @onclick="ResetSearch">&nbsp;@_localizer["Reset"]&nbsp;</NavLink>
                </div>
            </div>
        </EditForm>
    </div>

    @if (income > 0)
    {
        <div class="jumbotron">
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    @_localizer["Savings for this month"]: @income
                </h3>
            </div>
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    @_localizer["Balans!"]
                </h3>
            </div>

            <div id="chartdiv"></div>
            <br />
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    @_localizer["Expenditure!"]
                </h3>
            </div>
            <div id="chartdiv1"></div>
            <br />
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    @_localizer["Receipt!"]
                </h3>
            </div>
            <div id="chartdiv2"></div>
        </div>
    }
    else
    {
        <h2 class="text-center mt-5" style="color:blue;">@_localizer["The balance amount is zero."]</h2>
    }

</div>



@code{

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    CategoryDto model = new CategoryDto();

    List<SumBalans> sumBalans = new List<SumBalans>();
    List<SumExpenditure> sumExpenditures = new List<SumExpenditure>();
    List<SumReceipt> sumReceipt = new List<SumReceipt>();
    decimal sumCost;
    bool Collapsed = true;
    IEnumerable<CategoryDto> categoryList = new List<CategoryDto>();
    private Timer timerObj = new(1000);

    int count = 1;
    decimal income = 0;
    decimal outcome = 0;
    string userId;
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        model.CurrentDate = DateTime.Now;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
            categoryList = CategoryAdapter.GetCategorySum(userId);
            var expenditureAll = categoryList.Where(z => z.UserId == userId).Select(z => z.SumExpenditure).FirstOrDefault();
            var recieptAll = categoryList.Where(z => z.UserId == userId).Select(z => z.SumReceipt).FirstOrDefault();
            income = recieptAll - expenditureAll;
            sumCost = expenditureAll;
        }

    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(count == 1)
        {
            GeneratePieChartBlazorBalans();
            GeneratePieChartBlazorExpenditure();
            GeneratePieChartBlazorReceipt();
            count ++;
        }

    }

    private void HandleValidSubmit()
    {

    }

    public void ResetSearch()
    {

    }

    private void Collaps()
    {
        Collapsed = !Collapsed;
    }

    private async Task GeneratePieChartBlazorBalans()
    {
        categoryList = CategoryAdapter.GetCategorySum(userId);
        var expenditureAll = categoryList.Where(z => z.UserId == userId).Select(z => z.SumExpenditure).FirstOrDefault();
        var recieptAll = categoryList.Where(z => z.UserId == userId).Select(z => z.SumReceipt).FirstOrDefault();
        var remainderSum = recieptAll - expenditureAll;
        //income = recieptAll;
        //outcome = expenditureAll;

        sumBalans.Add(new SumBalans() { NameCategory = "Outcome", SumReceipt = recieptAll, SumExpenditure = remainderSum });
        sumBalans.Add(new SumBalans() { NameCategory = " Income", SumReceipt = recieptAll, SumExpenditure = 0 });



        await _jsRuntime.InvokeVoidAsync("GeneralPieChartBalans", sumBalans);
    }

    private async Task GeneratePieChartBlazorExpenditure()
    {
        //categoryList = CategoryAdapter.GetCategory(userId);
        //var categorySum = CategoryAdapter.GetCategorySum();
        //var receiptSum = categorySum.Where(z => z.UserId == userId).Select(z => z.SumReceipt).FirstOrDefault();

        //foreach (var item in categoryList.Where(z=>z.ExpenditureId>0).ToList())
        //{
        //    sumExpenditures.Add(new SumExpenditure() { NameCategory = item.NameExpenditure, SumReceipt = receiptSum, SumExpenditure = item.SumExpenditure });


        //}

        var count = 0;
        var modelList = CategoryAdapter.GetCategory(userId).Where(z => !string.IsNullOrEmpty(z.DescriptionCategory)).ToList();
        foreach (var item in modelList)
        {
            var sum = ExpenditureCategoryAdapter.GetExpenditureCategoSowSum((int)item.ExpenditureId).FirstOrDefault();
            if (sum.CurrentAllSum > 0)
            {
                modelList[count].CurrentAllSum = sum.CurrentAllSum;
                sumExpenditures.Add(new SumExpenditure() { NameCategory = item.NameExpenditure, SumReceipt = sum.CurrentSum, SumExpenditure = sum.CurrentAllSum });
            }

            count++;
        }

        await _jsRuntime.InvokeVoidAsync("GeneralPieChartExpenditure", sumExpenditures);
    }


    private async Task GeneratePieChartBlazorReceipt()
    {
        //categoryList = CategoryAdapter.GetCategory(userId);
        //int count = 1;


        //foreach (var item in categoryList.Where(z => z.SumReceipt > 0).ToList())
        //{
        //    sumReceipt.Add(new SumReceipt() { NameCategory = item.DescriptionCategory, SumReceipt = item.SumReceipt, SumExpenditure = 0 });

        //    //if (categoryList.Count() == count)
        //    //{
        //    //    var remainderSum = item.BalansRecipt - item.BalansExpenditure;
        //    //    sumList.Add(new SumPieDto() { NameCategory = "Amount on the balance.", SumReceipt = item.BalansRecipt, SumExpenditure = remainderSum });
        //    //    break;
        //    //}

        //    count++;
        //}

        var count = 0;
        var modelList = CategoryAdapter.GetCategory(userId).Where(z => !string.IsNullOrEmpty(z.DescriptionCategory)).ToList();
        foreach (var item in modelList)
        {
            var sum = RecieptCategoryAdapter.GetRecieptCategoSowSum((int)item.ReceiptId).FirstOrDefault();
            if (sum.CurrentAllSum > 0 && item.IsIncome == false)
            {
                sumReceipt.Add(new SumReceipt() { NameCategory = item.NameReceipt, SumReceipt = sum.CurrentAllSum, SumExpenditure = 0 });
            }

            count++;
        }

        await _jsRuntime.InvokeVoidAsync("GeneralPieChartReceipt", sumReceipt);
    }

    public void Dispose()
    {
        timerObj?.Dispose();
    }

    public enum Filter
    {
        GetAll,
        Income,
        OutCome
    }
}
@page "/report"
@using web.Data.Adapters;
@inject IJSRuntime _jsRuntime;
@using System.Timers
@implements IDisposable

<div>
    <div class="alert alert-primary" role="alert">
        <p class="text-right" style="color:blue;"> Costs: @sumCost</p>
    </div>
    @if (income > 0)
    {
        <div class="jumbotron">
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    Savings for this month: @income
                </h3>
            </div>
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    Balans!
                </h3>
            </div>

            <div id="chartdiv"></div>
            <br />
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    Expenditure!
                </h3>
            </div>
            <div id="chartdiv1"></div>
            <br />
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    Receipt!
                </h3>
            </div>
            <div id="chartdiv2"></div>
        </div>
    }
    else
    {
        <h2 class="text-center mt-5" style="color:blue;">The balance amount is zero.</h2>
    }

</div>



@code{
    CategoryDto model = new CategoryDto();

    List<SumBalans> sumBalans = new List<SumBalans>();
    List<SumExpenditure> sumExpenditures = new List<SumExpenditure>();
    List<SumReceipt> sumReceipt = new List<SumReceipt>();
    decimal sumCost;

    IEnumerable<CategoryDto> categoryList = new List<CategoryDto>();
    private Timer timerObj = new(1000);

    decimal income = 0;
    decimal outcome = 0;
    protected override async Task OnInitializedAsync()
    {
        categoryList = CategoryAdapter.GetCategorySum();
        var expenditureAll = categoryList.Select(z => z.SumExpenditure).FirstOrDefault();
        var recieptAll = categoryList.Select(z => z.SumReceipt).FirstOrDefault();
        income = recieptAll - expenditureAll;
        sumCost = recieptAll;
    }

    protected override void OnAfterRender(bool firstRender)
    {

        GeneratePieChartBlazorBalans();
        GeneratePieChartBlazorExpenditure();
        GeneratePieChartBlazorReceipt();
    }

    private async Task GeneratePieChartBlazorBalans()
    {
        categoryList = CategoryAdapter.GetCategorySum();
        var expenditureAll = categoryList.Select(z => z.SumExpenditure).FirstOrDefault();
        var recieptAll = categoryList.Select(z => z.SumReceipt).FirstOrDefault();
        var remainderSum = recieptAll - expenditureAll;
        //income = recieptAll;
        //outcome = expenditureAll;

        sumBalans.Add(new SumBalans() { NameCategory = "Outcome", SumReceipt = recieptAll, SumExpenditure = remainderSum });
        sumBalans.Add(new SumBalans() { NameCategory = " Income", SumReceipt = recieptAll, SumExpenditure = 0 });



        await _jsRuntime.InvokeVoidAsync("GeneralPieChartBalans", sumBalans);
    }

    private async Task GeneratePieChartBlazorExpenditure()
    {
        categoryList = CategoryAdapter.GetCategory();
        var categorySum = CategoryAdapter.GetCategorySum();
        var receiptSum = categorySum.Select(z => z.SumReceipt).FirstOrDefault();
        int count = 1;


        foreach (var item in categoryList.Where(z => z.SumExpenditure > 0).ToList())
        {
            sumExpenditures.Add(new SumExpenditure() { NameCategory = item.DescriptionCategory, SumReceipt = receiptSum, SumExpenditure = item.SumExpenditure });

            //if (categoryList.Count() == count)
            //{
            //    var remainderSum = item.BalansRecipt - item.BalansExpenditure;
            //    sumExpenditures.Add(new SumExpenditure() { NameCategory = "Amount on the balance.", SumReceipt = item.BalansRecipt, SumExpenditure = remainderSum });
            //    break;
            //}

            count++;
        }

        await _jsRuntime.InvokeVoidAsync("GeneralPieChartExpenditure", sumExpenditures);
    }


    private async Task GeneratePieChartBlazorReceipt()
    {
        categoryList = CategoryAdapter.GetCategory();
        int count = 1;


        foreach (var item in categoryList.Where(z => z.SumReceipt > 0).ToList())
        {
            sumReceipt.Add(new SumReceipt() { NameCategory = item.DescriptionCategory, SumReceipt = item.SumReceipt, SumExpenditure = 0 });

            //if (categoryList.Count() == count)
            //{
            //    var remainderSum = item.BalansRecipt - item.BalansExpenditure;
            //    sumList.Add(new SumPieDto() { NameCategory = "Amount on the balance.", SumReceipt = item.BalansRecipt, SumExpenditure = remainderSum });
            //    break;
            //}

            count++;
        }

        await _jsRuntime.InvokeVoidAsync("GeneralPieChartReceipt", sumReceipt);
    }

    public void Dispose()
    {
        timerObj?.Dispose();
    }
}
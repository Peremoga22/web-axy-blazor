@page "/report"
@using web.Data.Adapters;
@inject IJSRuntime _jsRuntime;
@using System.Timers
@implements IDisposable
@inject IStringLocalizer<App> _localizer

<div>
    <div class="alert alert-primary" role="alert">
        <p class="text-right" style="color:blue;">@_localizer["Costs"]: @sumCost</p>
    </div>
    @if (income > 0)
    {
        <div class="jumbotron">
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    @_localizer["Savings for this month"]: @income
                </h3>
            </div>
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    @_localizer["Balans!"]
                </h3>
            </div>

            <div id="chartdiv"></div>
            <br />
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    @_localizer["Expenditure!"]
                </h3>
            </div>
            <div id="chartdiv1"></div>
            <br />
            <div class="well span6" style="padding-top: 50px">
                <h3 class="text-center">
                    @_localizer["Receipt!"]
                </h3>
            </div>
            <div id="chartdiv2"></div>
        </div>
    }
    else
    {
        <h2 class="text-center mt-5" style="color:blue;">@_localizer["The balance amount is zero."]</h2>
    }

</div>



@code{

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    CategoryDto model = new CategoryDto();

    List<SumBalans> sumBalans = new List<SumBalans>();
    List<SumExpenditure> sumExpenditures = new List<SumExpenditure>();
    List<SumReceipt> sumReceipt = new List<SumReceipt>();
    decimal sumCost;

    IEnumerable<CategoryDto> categoryList = new List<CategoryDto>();
    private Timer timerObj = new(1000);

    decimal income = 0;
    decimal outcome = 0;
    string userId;
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        model.CurrentDate = DateTime.Now;

        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
            categoryList = CategoryAdapter.GetCategorySum();
            var expenditureAll = categoryList.Where(z => z.UserId == userId).Select(z => z.SumExpenditure).FirstOrDefault();
            var recieptAll = categoryList.Where(z => z.UserId == userId).Select(z => z.SumReceipt).FirstOrDefault();
            income = recieptAll - expenditureAll;
            sumCost = expenditureAll;
        }

    }

    protected override void OnAfterRender(bool firstRender)
    {

        GeneratePieChartBlazorBalans();
        GeneratePieChartBlazorExpenditure();
        GeneratePieChartBlazorReceipt();
    }

    private async Task GeneratePieChartBlazorBalans()
    {
        categoryList = CategoryAdapter.GetCategorySum();
        var expenditureAll = categoryList.Where(z => z.UserId == userId).Select(z => z.SumExpenditure).FirstOrDefault();
        var recieptAll = categoryList.Where(z => z.UserId == userId).Select(z => z.SumReceipt).FirstOrDefault();
        var remainderSum = recieptAll - expenditureAll;
        //income = recieptAll;
        //outcome = expenditureAll;

        sumBalans.Add(new SumBalans() { NameCategory = "Outcome", SumReceipt = recieptAll, SumExpenditure = remainderSum });
        sumBalans.Add(new SumBalans() { NameCategory = " Income", SumReceipt = recieptAll, SumExpenditure = 0 });



        await _jsRuntime.InvokeVoidAsync("GeneralPieChartBalans", sumBalans);
    }

    private async Task GeneratePieChartBlazorExpenditure()
    {
        //categoryList = CategoryAdapter.GetCategory(userId);
        //var categorySum = CategoryAdapter.GetCategorySum();
        //var receiptSum = categorySum.Where(z => z.UserId == userId).Select(z => z.SumReceipt).FirstOrDefault();

        //foreach (var item in categoryList.Where(z=>z.ExpenditureId>0).ToList())
        //{
        //    sumExpenditures.Add(new SumExpenditure() { NameCategory = item.NameExpenditure, SumReceipt = receiptSum, SumExpenditure = item.SumExpenditure });


        //}

        var count = 0;
        var modelList = CategoryAdapter.GetCategory(userId).Where(z => !string.IsNullOrEmpty(z.DescriptionCategory)).ToList();
        foreach (var item in modelList)
        {
            var sum = ExpenditureCategoryAdapter.GetExpenditureCategoSowSum((int)item.ExpenditureId).FirstOrDefault();
            if (sum.CurrentAllSum > 0)
            {
                modelList[count].CurrentAllSum = sum.CurrentAllSum;
                sumExpenditures.Add(new SumExpenditure() { NameCategory = item.NameExpenditure, SumReceipt = sum.CurrentSum, SumExpenditure = sum.CurrentAllSum });
            }

            count++;
        }

        await _jsRuntime.InvokeVoidAsync("GeneralPieChartExpenditure", sumExpenditures);
    }


    private async Task GeneratePieChartBlazorReceipt()
    {
        categoryList = CategoryAdapter.GetCategory(userId);
        int count = 1;


        foreach (var item in categoryList.Where(z => z.SumReceipt > 0).ToList())
        {
            sumReceipt.Add(new SumReceipt() { NameCategory = item.DescriptionCategory, SumReceipt = item.SumReceipt, SumExpenditure = 0 });

            //if (categoryList.Count() == count)
            //{
            //    var remainderSum = item.BalansRecipt - item.BalansExpenditure;
            //    sumList.Add(new SumPieDto() { NameCategory = "Amount on the balance.", SumReceipt = item.BalansRecipt, SumExpenditure = remainderSum });
            //    break;
            //}

            count++;
        }

        await _jsRuntime.InvokeVoidAsync("GeneralPieChartReceipt", sumReceipt);
    }

    public void Dispose()
    {
        timerObj?.Dispose();
    }
}
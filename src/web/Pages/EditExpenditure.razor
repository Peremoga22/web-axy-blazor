@page "/edit-expenditure/{Id:int}"
@inject NavigationManager _navigationManager

<h3>@nameCategory</h3>
<table class="table table-striped table-bordered table-sm">
    <thead>
        <tr>
            <th class="text-right">Description</th>
            <th class="text-right">Current Sum</th>
            <th class="text-right">Date Time</th>
            <th class="text-center">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in modelList)
        {
            <tr>
                @if (item.IsShowUp)
                {
                    <td class="text-right" style="color:red">@item.Description</td>
                    <td class="text-right">@item.CurrentSum</td>

                    <td class="text-right">@item.CurrentDate.ToString("dd-MM-yyyy")</td>
                }

                <td class="text-center">
                    <button class="btn btn-sm btn-outline-dark">
                        <img @onclick="(() => ShowPopup(item.ExpenditureCategoryId))" src="https://img.icons8.com/external-kiranshastry-solid-kiranshastry/21/000000/external-edit-interface-kiranshastry-solid-kiranshastry.png" />
                    </button>
                    <button class="btn btn-sm btn-outline-danger">
                        <img @onclick="(() => Delete(item.ExpenditureCategoryId))" disabled="@DeleteDisabled" src="https://img.icons8.com/ios/21/000000/delete-forever--v1.png" />
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="text-left">
    <NavLink class="btn btn-outline-secondary" href="/get-all-categories">Back</NavLink>
</div>

@if (popup)
{
    <EditForm Model="@model" OnValidSubmit="HandleValidSubmitPopup" class="body  p-3 mb-5 rounded ">
        <div class="modal" tabindex="-1" role="dialog" style="display:block;">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Edit Category</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(() => ClosePopup())">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-striped table-bordered table-sm">
                            <tr class="form-group">
                                <td>Name</td>
                                <td><input class="form-control" type="text" @bind-value="model.Description" /></td>
                            </tr>
                            <tr class="form-group">
                                <td>Current Sum</td>
                                <td><input class="form-control" type="number" @bind-value="model.CurrentSum" /></td>
                            </tr>
                            <tr class="form-group">
                                <td>Date Time</td>
                                <td><input class="form-control" type="date" @bind-value="model.CurrentDate" disabled/></td>
                            </tr>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">Save changes</button>
                        <button type="button" class="btn btn-secondary" @onclick="(() => ClosePopup())" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}


@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<ExpenditureCategoryDto> modelList = new List<ExpenditureCategoryDto>();
    ExpenditureCategoryDto model = new ExpenditureCategoryDto();

    bool popup = false;
    string DeleteDisabled { get; set; } = null;
    string userId;
    string nameCategory;
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
            modelList = ExpenditureCategoryAdapter.GetExpenditureCategorId(Id, userId);

            nameCategory = modelList.Select(z => z.CategoryName).FirstOrDefault();
        }
    }

    private void HandleValidSubmitPopup()
    {
        ExpenditureCategoryAdapter.SaveExpenditureCategory(model);
        popup = false;

        modelList = ExpenditureCategoryAdapter.GetExpenditureCategorId(Id, userId);
        nameCategory = modelList.Select(z => z.CategoryName).FirstOrDefault();
    }

    public void ClosePopup()
    {
        popup = false;
    }

    public void ShowPopup(int id)
    {
        popup = true;
        model = ExpenditureCategoryAdapter.GetExpenditureCategoById(id);
    }

    private void Delete(int id)
    {

    }
}

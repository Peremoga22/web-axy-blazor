@page "/edit-expenditure/{Id:int}"
@inject NavigationManager _navigationManager

<h3>@nameCategory</h3>
<table class="table table-striped table-bordered table-sm">
    <thead>
        <tr>
            <th class="text-right">Description</th>
            <th class="text-right">Current Sum</th>            
            <th class="text-right">Date Time</th>
            <th class="text-center">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in modelList)
        {           
            <tr>
                @if (item.IsShowUp)
                {
                    <td class="text-right" style="color:red">@item.Description</td>
                    <td class="text-right">@item.CurrentSum</td>                    
                    <td class="text-right">@item.CurrentDate.ToString("dd-MM-yyyy")</td>
                }

                <td class="text-center">
                    <button class="btn btn-sm btn-outline-dark">                 
                        <img @onclick="(() => ShowPopup(item.ExpenditureCategoryId))" src="https://img.icons8.com/external-kiranshastry-solid-kiranshastry/21/000000/external-edit-interface-kiranshastry-solid-kiranshastry.png" />
                    </button>
                    <button class="btn btn-sm btn-outline-danger">
                        <img @onclick="(() => Delete(item.ExpenditureCategoryId))" disabled="@DeleteDisabled" src="https://img.icons8.com/ios/21/000000/delete-forever--v1.png" />
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    List<ExpenditureCategoryDto> modelList = new List<ExpenditureCategoryDto>();

    bool popup = false;
    string DeleteDisabled { get; set; } = null;
    string userId;
    string nameCategory;
    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        if(user.Identity.IsAuthenticated)
        {
            userId = user.FindFirst(ClaimTypes.NameIdentifier).Value;
            modelList = ExpenditureCategoryAdapter.GetExpenditureCategorId(Id,userId);

            nameCategory = modelList.Select(z => z.CategoryName).FirstOrDefault();
        }
    }


    public void ShowPopup(int id)
    {
        popup = true;

    }

    private void Delete(int id)
    {

    }
}
